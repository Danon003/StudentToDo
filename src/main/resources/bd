create table users (
    id int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    password varchar(255) not null,
    name varchar(100) not null,
    email varchar(255) unique not null,
    role varchar(20) not null default 'STUDENT',
    created_at timestamp,
    last_login timestamp
);

create table groups (
    id int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name varchar(100) not null,
    description text,
    created_by int references users(id) on DELETE restrict,
    created_at timestamp

);

create table user_groups
(
    user_id int references users (id) on delete cascade,
    group_id int references groups (id) on delete cascade,
    created_at timestamp,
    PRIMARY KEY (user_id, group_id)
);

create table tasks (
    id int primary key generated by default as identity,
    title varchar(255) not null,
    description text,
    deadline timestamp,
    priority varchar(10) not null,
    status varchar(15) not null default 'NOT_STARTED',
    author_id int references users(id) on delete set null,
    created_at timestamp,
    updated_at timestamp
);

create table task_assignments(
    task_id int references tasks(id) on delete cascade,
    user_id int references users(id) on delete cascade,
    assigned_by int references users(id) on delete restrict ,
    assigned_at timestamp,
    primary key (task_id, user_id)
);

create table tags (
    id int primary key generated by default as identity,
    name varchar(50) unique not null
);

create table task_tags (
    task_id int references tasks(id) on delete cascade,
    tag_id int references tags(id) on delete cascade,
    primary key (task_id, tag_id)
);

create table notifications (
    id int primary key generated by default as identity,
    user_id int references users(id) on delete cascade,
    title varchar(100) not null,
    message text,
    is_read boolean not null default false,
    created_at timestamp
);

CREATE TABLE calendar_events (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id INT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    task_id INT REFERENCES tasks(id) ON DELETE SET NULL,
    title VARCHAR(100) NOT NULL,
    start_time TIMESTAMP,
    end_time TIMESTAMP
);

CREATE TABLE role_audit_log (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id INT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    old_role VARCHAR(20) NOT NULL,
    new_role VARCHAR(20) NOT NULL,
    changed_by INT NOT NULL REFERENCES users(id) ON DELETE RESTRICT,
    changed_at TIMESTAMP
);

CREATE INDEX idx_tasks_deadline ON tasks(deadline);
CREATE INDEX idx_tasks_status ON tasks(status);
CREATE INDEX idx_user_groups ON user_groups(user_id, group_id);
CREATE INDEX idx_notifications_user ON notifications(user_id, is_read);

ALTER TABLE tasks ADD CONSTRAINT valid_priority
    CHECK (priority IN ('HIGH', 'MEDIUM', 'LOW'));

ALTER TABLE tasks ADD CONSTRAINT valid_status
    CHECK (status IN ('NOT_STARTED', 'IN_PROGRESS', 'COMPLETED'));

ALTER TABLE calendar_events ADD CONSTRAINT valid_time_range
    CHECK (end_time > start_time);